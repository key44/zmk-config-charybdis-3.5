#include <dt-bindings/zmk/mouse.h>
#include <behaviors/mouse_keys.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>
#include <../boards/shields/nice_nano_v2.overlay>

&led_strip {
    chain-length = <21>;
};

/ {
    combos {
        compatible = "zmk,combos";

        mkp_left {
            bindings = <&mkp LCLK>;
            key-positions = <19 20>;
        };

        rclk {
            bindings = <&mkp RCLK>;
            key-positions = <20 21>;
        };

        mclk {
            bindings = <&mkp MCLK>;
            key-positions = <19 21>;
        };

        mb4 {
            bindings = <&mkp MB4>;
            key-positions = <31 32>;
        };

        mb5 {
            bindings = <&mkp MB5>;
            key-positions = <32 33>;
        };

        scroll {
            bindings = <&mo 1>;
            key-positions = <19 22>;
        };
    };

    behaviors {
        hanzen_space: hanzen_space {
            compatible = "zmk,behavior-tap-dance";
            label = "HANZEN_SPACE";
            #binding-cells = <0>;
            bindings = <&kp LEFT_CONTROL>, <&kp LC(SPACE)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            label = "Base";
            bindings = <
&kp ESC             &kp Q  &kp W  &kp E        &kp R        &kp T                     &kp Y               &kp U        &kp I      &kp O    &kp P     &kp BSPC
&kp TAB             &kp A  &kp S  &kp D        &kp F        &kp G                     &kp H               &kp J        &kp K      &kp L    &kp SEMI  &kp SQT
&mt LEFT_ALT EQUAL  &kp Z  &kp X  &kp C        &kp V        &kp B                     &kp N               &kp M        &kp COMMA  &kp DOT  &kp FSLH  &kp BACKSLASH
                                  &lt 3 GRAVE  &lt 1 ENTER  &mt LEFT_CONTROL MINUS    &mt LEFT_SHIFT DEL  &lt 2 SPACE
            >;
        };

        Lower {
            label = "Lower";
            bindings = <
&kp ASTRK  &kp SLASH        &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp EQUAL    &trans  &trans        &trans    &trans     &trans  &trans
&kp DEL    &kp BACKSPACE    &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp MINUS    &trans  &trans        &kp UP    &trans     &trans  &trans
&kp ENTER  &kp KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp DOT      &trans  &kp LEFT      &kp DOWN  &kp RIGHT  &trans  &trans
                                             &kp LC(LA(DEL))  &trans           &trans       &trans  &lt 4 KP_NUM
            >;
        };

        Raise {
            label = "Raise";
            bindings = <
&kp TAB    &bt BT_NXT      &kp F7  &kp F8  &kp F9      &kp F12    &trans     &kp LPAR  &kp RPAR  &trans  &trans  &trans
&kp LCTRL  &bt BT_PRV      &kp F4  &kp F5  &kp F6      &kp F11    &kp GRAVE  &kp LBKT  &kp RBKT  &trans  &trans  &trans
&kp LSHFT  &bt BT_CLR_ALL  &kp F1  &kp F2  &kp F3      &kp F10    &trans     &trans    &trans    &trans  &trans  &trans
                                   &trans  &kp LSHIFT  &trans     &trans     &trans
            >;
        };

        mouse_layer {
            bindings = <
&trans     &trans       &trans      &trans    &trans       &trans    &trans  &trans         &trans     &trans     &trans  &trans
&kp CARET  &kp PERCENT  &kp DOLLAR  &kp HASH  &kp AT_SIGN  &trans    &trans  &mkp LCLK      &mkp RCLK  &mkp MCLK  &trans  &trans
&kp LC(Y)  &kp ASTRK    &trans      &trans    &kp EXCL     &trans    &trans  &mkp MB4       &mkp MB5   &trans     &trans  &trans
                                    &trans    &trans       &trans    &trans  &kp LC(SPACE)
            >;
        };

        zenkaku_num {
            bindings = <
&trans  &trans  &kp N7  &kp N8  &kp N9  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp N4  &kp N5  &kp N6  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp N1  &kp N2  &kp N3  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans
            >;
        };
    };
};
